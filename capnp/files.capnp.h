// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: files.capnp

#ifndef CAPNP_INCLUDED_9afcc4d6f94840b3_
#define CAPNP_INCLUDED_9afcc4d6f94840b3_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 4000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif



struct File {
  File() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct FileDigest;
  struct FilePath;
};

struct File::FileDigest {
  FileDigest() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum class Algorithm: uint16_t {
    MD5,
    SHA1,
    SHA224,
    SHA256,
    SHA384,
    SHA512,
  };

};

struct File::FilePath {
  FilePath() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};

struct Tree {
  Tree() = delete;

  class Reader;
  class Builder;
  class Pipeline;
};


// =======================================================================================

namespace capnp {
namespace schemas {

extern const ::capnp::_::RawSchema s_b791087a45bb481b;
extern const ::capnp::_::RawSchema s_f317847c0fe06ff1;
extern const ::capnp::_::RawSchema s_819c228e121ece34;
extern const ::capnp::_::RawSchema s_da2b33300c6ae1b2;
extern const ::capnp::_::RawSchema s_803cc47d25ff44d4;

}  // namespace schemas
namespace _ {  // private

CAPNP_DECLARE_STRUCT(
    ::File, b791087a45bb481b,
    3, 3, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::File::FileDigest, f317847c0fe06ff1,
    1, 1, INLINE_COMPOSITE);
CAPNP_DECLARE_ENUM(
    ::File::FileDigest::Algorithm, 819c228e121ece34);
CAPNP_DECLARE_STRUCT(
    ::File::FilePath, da2b33300c6ae1b2,
    0, 3, INLINE_COMPOSITE);
CAPNP_DECLARE_STRUCT(
    ::Tree, 803cc47d25ff44d4,
    0, 1, POINTER);

}  // namespace _ (private)
}  // namespace capnp

// =======================================================================================


class File::Reader {
public:
  typedef File Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline  ::uint64_t getId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint64_t getSize() const;

  inline double getMtime() const;

  inline bool hasDigests() const;
  inline  ::capnp::List< ::File::FileDigest>::Reader getDigests() const;

  inline bool hasPaths() const;
  inline  ::capnp::List< ::File::FilePath>::Reader getPaths() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(File::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(File::Reader reader) {
  return ::capnp::_::structString<File>(reader._reader);
}

class File::Builder {
public:
  typedef File Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline  ::uint64_t getId();
  inline void setId( ::uint64_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint64_t getSize();
  inline void setSize( ::uint64_t value);

  inline double getMtime();
  inline void setMtime(double value);

  inline bool hasDigests();
  inline  ::capnp::List< ::File::FileDigest>::Builder getDigests();
  inline void setDigests( ::capnp::List< ::File::FileDigest>::Reader value);
  inline  ::capnp::List< ::File::FileDigest>::Builder initDigests(unsigned int size);
  inline void adoptDigests(::capnp::Orphan< ::capnp::List< ::File::FileDigest>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::File::FileDigest>> disownDigests();

  inline bool hasPaths();
  inline  ::capnp::List< ::File::FilePath>::Builder getPaths();
  inline void setPaths( ::capnp::List< ::File::FilePath>::Reader value);
  inline  ::capnp::List< ::File::FilePath>::Builder initPaths(unsigned int size);
  inline void adoptPaths(::capnp::Orphan< ::capnp::List< ::File::FilePath>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::File::FilePath>> disownPaths();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(File::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(File::Builder builder) {
  return ::capnp::_::structString<File>(builder._builder.asReader());
}

class File::Pipeline {
public:
  typedef File Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class File::FileDigest::Reader {
public:
  typedef FileDigest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasDigest() const;
  inline  ::capnp::Data::Reader getDigest() const;

  inline  ::File::FileDigest::Algorithm getAlgorithm() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(File::FileDigest::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(File::FileDigest::Reader reader) {
  return ::capnp::_::structString<File::FileDigest>(reader._reader);
}

class File::FileDigest::Builder {
public:
  typedef FileDigest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasDigest();
  inline  ::capnp::Data::Builder getDigest();
  inline void setDigest( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initDigest(unsigned int size);
  inline void adoptDigest(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownDigest();

  inline  ::File::FileDigest::Algorithm getAlgorithm();
  inline void setAlgorithm( ::File::FileDigest::Algorithm value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(File::FileDigest::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(File::FileDigest::Builder builder) {
  return ::capnp::_::structString<File::FileDigest>(builder._builder.asReader());
}

class File::FileDigest::Pipeline {
public:
  typedef FileDigest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class File::FilePath::Reader {
public:
  typedef FilePath Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasHostname() const;
  inline  ::capnp::Text::Reader getHostname() const;

  inline bool hasDirectory() const;
  inline  ::capnp::Text::Reader getDirectory() const;

  inline bool hasBasename() const;
  inline  ::capnp::Text::Reader getBasename() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(File::FilePath::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(File::FilePath::Reader reader) {
  return ::capnp::_::structString<File::FilePath>(reader._reader);
}

class File::FilePath::Builder {
public:
  typedef FilePath Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasHostname();
  inline  ::capnp::Text::Builder getHostname();
  inline void setHostname( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initHostname(unsigned int size);
  inline void adoptHostname(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownHostname();

  inline bool hasDirectory();
  inline  ::capnp::Text::Builder getDirectory();
  inline void setDirectory( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDirectory(unsigned int size);
  inline void adoptDirectory(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDirectory();

  inline bool hasBasename();
  inline  ::capnp::Text::Builder getBasename();
  inline void setBasename( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBasename(unsigned int size);
  inline void adoptBasename(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBasename();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(File::FilePath::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(File::FilePath::Builder builder) {
  return ::capnp::_::structString<File::FilePath>(builder._builder.asReader());
}

class File::FilePath::Pipeline {
public:
  typedef FilePath Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

class Tree::Reader {
public:
  typedef Tree Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

  inline bool hasFiles() const;
  inline  ::capnp::List< ::File>::Reader getFiles() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::_::PointerHelpers;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Tree::Reader reader);
};

inline ::kj::StringTree KJ_STRINGIFY(Tree::Reader reader) {
  return ::capnp::_::structString<Tree>(reader._reader);
}

class Tree::Builder {
public:
  typedef Tree Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }

  inline bool hasFiles();
  inline  ::capnp::List< ::File>::Builder getFiles();
  inline void setFiles( ::capnp::List< ::File>::Reader value);
  inline  ::capnp::List< ::File>::Builder initFiles(unsigned int size);
  inline void adoptFiles(::capnp::Orphan< ::capnp::List< ::File>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::File>> disownFiles();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  friend ::kj::StringTree KJ_STRINGIFY(Tree::Builder builder);
};

inline ::kj::StringTree KJ_STRINGIFY(Tree::Builder builder) {
  return ::capnp::_::structString<Tree>(builder._builder.asReader());
}

class Tree::Pipeline {
public:
  typedef Tree Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  template <typename T, ::capnp::Kind k>
  friend struct ::capnp::ToDynamic_;
};

// =======================================================================================

inline  ::uint64_t File::Reader::getId() const {
  return _reader.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}

inline  ::uint64_t File::Builder::getId() {
  return _builder.getDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS);
}
inline void File::Builder::setId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool File::Reader::hasName() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool File::Builder::hasName() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader File::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder File::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void File::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder File::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void File::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> File::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::uint64_t File::Reader::getSize() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t File::Builder::getSize() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void File::Builder::setSize( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}

inline double File::Reader::getMtime() const {
  return _reader.getDataField<double>(
      2 * ::capnp::ELEMENTS);
}

inline double File::Builder::getMtime() {
  return _builder.getDataField<double>(
      2 * ::capnp::ELEMENTS);
}
inline void File::Builder::setMtime(double value) {
  _builder.setDataField<double>(
      2 * ::capnp::ELEMENTS, value);
}

inline bool File::Reader::hasDigests() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool File::Builder::hasDigests() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::File::FileDigest>::Reader File::Reader::getDigests() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File::FileDigest>>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::File::FileDigest>::Builder File::Builder::getDigests() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File::FileDigest>>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void File::Builder::setDigests( ::capnp::List< ::File::FileDigest>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::File::FileDigest>>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::File::FileDigest>::Builder File::Builder::initDigests(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File::FileDigest>>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void File::Builder::adoptDigests(
    ::capnp::Orphan< ::capnp::List< ::File::FileDigest>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::File::FileDigest>>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::File::FileDigest>> File::Builder::disownDigests() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File::FileDigest>>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool File::Reader::hasPaths() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool File::Builder::hasPaths() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::File::FilePath>::Reader File::Reader::getPaths() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File::FilePath>>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::File::FilePath>::Builder File::Builder::getPaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File::FilePath>>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void File::Builder::setPaths( ::capnp::List< ::File::FilePath>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::File::FilePath>>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::File::FilePath>::Builder File::Builder::initPaths(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File::FilePath>>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void File::Builder::adoptPaths(
    ::capnp::Orphan< ::capnp::List< ::File::FilePath>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::File::FilePath>>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::File::FilePath>> File::Builder::disownPaths() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File::FilePath>>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool File::FileDigest::Reader::hasDigest() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool File::FileDigest::Builder::hasDigest() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader File::FileDigest::Reader::getDigest() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder File::FileDigest::Builder::getDigest() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void File::FileDigest::Builder::setDigest( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder File::FileDigest::Builder::initDigest(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void File::FileDigest::Builder::adoptDigest(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> File::FileDigest::Builder::disownDigest() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::File::FileDigest::Algorithm File::FileDigest::Reader::getAlgorithm() const {
  return _reader.getDataField< ::File::FileDigest::Algorithm>(
      0 * ::capnp::ELEMENTS);
}

inline  ::File::FileDigest::Algorithm File::FileDigest::Builder::getAlgorithm() {
  return _builder.getDataField< ::File::FileDigest::Algorithm>(
      0 * ::capnp::ELEMENTS);
}
inline void File::FileDigest::Builder::setAlgorithm( ::File::FileDigest::Algorithm value) {
  _builder.setDataField< ::File::FileDigest::Algorithm>(
      0 * ::capnp::ELEMENTS, value);
}

inline bool File::FilePath::Reader::hasHostname() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool File::FilePath::Builder::hasHostname() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader File::FilePath::Reader::getHostname() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder File::FilePath::Builder::getHostname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void File::FilePath::Builder::setHostname( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder File::FilePath::Builder::initHostname(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void File::FilePath::Builder::adoptHostname(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> File::FilePath::Builder::disownHostname() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline bool File::FilePath::Reader::hasDirectory() const {
  return !_reader.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline bool File::FilePath::Builder::hasDirectory() {
  return !_builder.getPointerField(1 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader File::FilePath::Reader::getDirectory() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(1 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder File::FilePath::Builder::getDirectory() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}
inline void File::FilePath::Builder::setDirectory( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(1 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder File::FilePath::Builder::initDirectory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(1 * ::capnp::POINTERS), size);
}
inline void File::FilePath::Builder::adoptDirectory(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(1 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> File::FilePath::Builder::disownDirectory() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(1 * ::capnp::POINTERS));
}

inline bool File::FilePath::Reader::hasBasename() const {
  return !_reader.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline bool File::FilePath::Builder::hasBasename() {
  return !_builder.getPointerField(2 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader File::FilePath::Reader::getBasename() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _reader.getPointerField(2 * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder File::FilePath::Builder::getBasename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}
inline void File::FilePath::Builder::setBasename( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(
      _builder.getPointerField(2 * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder File::FilePath::Builder::initBasename(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(
      _builder.getPointerField(2 * ::capnp::POINTERS), size);
}
inline void File::FilePath::Builder::adoptBasename(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(
      _builder.getPointerField(2 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> File::FilePath::Builder::disownBasename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(
      _builder.getPointerField(2 * ::capnp::POINTERS));
}

inline bool Tree::Reader::hasFiles() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool Tree::Builder::hasFiles() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::File>::Reader Tree::Reader::getFiles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::File>::Builder Tree::Builder::getFiles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void Tree::Builder::setFiles( ::capnp::List< ::File>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::File>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::File>::Builder Tree::Builder::initFiles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void Tree::Builder::adoptFiles(
    ::capnp::Orphan< ::capnp::List< ::File>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::File>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::File>> Tree::Builder::disownFiles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::File>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}


#endif  // CAPNP_INCLUDED_9afcc4d6f94840b3_
